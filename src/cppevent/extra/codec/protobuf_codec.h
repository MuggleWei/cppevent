#ifndef CPPEVENT_PROTOBUF_CODEC_H_
#define CPPEVENT_PROTOBUF_CODEC_H_

#include "cppevent/core/cppevent_def.h"

#include <google/protobuf/message.h>
#include "cppevent/extra/cppevent_extra_def.h"

NS_CPPEVENT_BEGIN

class ProtobufCodec
{
public:
	enum eDecodeError
	{
		DecodeError_NoError = 0,		// success
		DecodeError_BeyondLenLimit,		// total len >= max_total_len_
		DecodeError_BeyondNameLenLimit, // name len >= max_name_len_
		DecodeError_WrongLen,			// name len > total len - 8
		DecodeError_FailedCreateMessage,// CreateProtoMessage return nullptr
		DecodeError_WrongMessage,		// ParseFromArray return nullptr
	};

public:
	cppevent_extra_EXPORT ProtobufCodec(int32_t max_total_len = 0, int32_t max_name_len = 0);

	/*
	 *  code protobuf message to bytes array
	 *  @msg: protobuf message
	 *  @total_len: generated bytes length
	 *  @RETURN: the result bytes, user is responsible for free the memory
	 */
	cppevent_extra_EXPORT char* code(const google::protobuf::Message *msg, int32_t &total_len);

	/*
	 *  decode bytes array to protobuf message
	 *  @bytes: bytes array
	 *  @total_len: the bytes length
	 *  @RETURN: the decode result, user is responsible for free the memory
	 */
	cppevent_extra_EXPORT google::protobuf::Message* decode(const char *bytes, int32_t &total_len, eDecodeError &err);

private:
	int32_t max_total_len_; // max total length of byte array, <= 0 represent unlimited
	int32_t max_name_len_;  // max name lenght of message full name, <= 0 represent unlimited
};

NS_CPPEVENT_END

#endif