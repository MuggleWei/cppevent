// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameobject.proto

#ifndef PROTOBUF_gameobject_2eproto__INCLUDED
#define PROTOBUF_gameobject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_gameobject_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPositionImpl();
void InitDefaultsPosition();
void InitDefaultsRotationImpl();
void InitDefaultsRotation();
void InitDefaultsScaleImpl();
void InitDefaultsScale();
void InitDefaultsTransformImpl();
void InitDefaultsTransform();
inline void InitDefaults() {
  InitDefaultsPosition();
  InitDefaultsRotation();
  InitDefaultsScale();
  InitDefaultsTransform();
}
}  // namespace protobuf_gameobject_2eproto
namespace gen {
namespace proto {
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Rotation;
class RotationDefaultTypeInternal;
extern RotationDefaultTypeInternal _Rotation_default_instance_;
class Scale;
class ScaleDefaultTypeInternal;
extern ScaleDefaultTypeInternal _Scale_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
}  // namespace proto
}  // namespace gen
namespace gen {
namespace proto {

// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gen.proto.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const PROTOBUF_FINAL { return New(NULL); }

  Position* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:gen.proto.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameobject_2eproto::TableStruct;
  friend void ::protobuf_gameobject_2eproto::InitDefaultsPositionImpl();
};
// -------------------------------------------------------------------

class Rotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gen.proto.Rotation) */ {
 public:
  Rotation();
  virtual ~Rotation();

  Rotation(const Rotation& from);

  inline Rotation& operator=(const Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rotation(Rotation&& from) noexcept
    : Rotation() {
    *this = ::std::move(from);
  }

  inline Rotation& operator=(Rotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rotation* internal_default_instance() {
    return reinterpret_cast<const Rotation*>(
               &_Rotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Rotation* other);
  friend void swap(Rotation& a, Rotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rotation* New() const PROTOBUF_FINAL { return New(NULL); }

  Rotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rotation& from);
  void MergeFrom(const Rotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x_axis = 1;
  void clear_x_axis();
  static const int kXAxisFieldNumber = 1;
  float x_axis() const;
  void set_x_axis(float value);

  // float y_axis = 2;
  void clear_y_axis();
  static const int kYAxisFieldNumber = 2;
  float y_axis() const;
  void set_y_axis(float value);

  // float z_axis = 3;
  void clear_z_axis();
  static const int kZAxisFieldNumber = 3;
  float z_axis() const;
  void set_z_axis(float value);

  // @@protoc_insertion_point(class_scope:gen.proto.Rotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_axis_;
  float y_axis_;
  float z_axis_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameobject_2eproto::TableStruct;
  friend void ::protobuf_gameobject_2eproto::InitDefaultsRotationImpl();
};
// -------------------------------------------------------------------

class Scale : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gen.proto.Scale) */ {
 public:
  Scale();
  virtual ~Scale();

  Scale(const Scale& from);

  inline Scale& operator=(const Scale& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scale(Scale&& from) noexcept
    : Scale() {
    *this = ::std::move(from);
  }

  inline Scale& operator=(Scale&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Scale& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scale* internal_default_instance() {
    return reinterpret_cast<const Scale*>(
               &_Scale_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Scale* other);
  friend void swap(Scale& a, Scale& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scale* New() const PROTOBUF_FINAL { return New(NULL); }

  Scale* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Scale& from);
  void MergeFrom(const Scale& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Scale* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x_scale = 1;
  void clear_x_scale();
  static const int kXScaleFieldNumber = 1;
  float x_scale() const;
  void set_x_scale(float value);

  // float y_scale = 2;
  void clear_y_scale();
  static const int kYScaleFieldNumber = 2;
  float y_scale() const;
  void set_y_scale(float value);

  // float z_scale = 3;
  void clear_z_scale();
  static const int kZScaleFieldNumber = 3;
  float z_scale() const;
  void set_z_scale(float value);

  // @@protoc_insertion_point(class_scope:gen.proto.Scale)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_scale_;
  float y_scale_;
  float z_scale_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameobject_2eproto::TableStruct;
  friend void ::protobuf_gameobject_2eproto::InitDefaultsScaleImpl();
};
// -------------------------------------------------------------------

class Transform : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gen.proto.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Transform* other);
  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const PROTOBUF_FINAL { return New(NULL); }

  Transform* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gen.proto.Position position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::gen::proto::Position& position() const;
  ::gen::proto::Position* release_position();
  ::gen::proto::Position* mutable_position();
  void set_allocated_position(::gen::proto::Position* position);

  // .gen.proto.Rotation rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  const ::gen::proto::Rotation& rotation() const;
  ::gen::proto::Rotation* release_rotation();
  ::gen::proto::Rotation* mutable_rotation();
  void set_allocated_rotation(::gen::proto::Rotation* rotation);

  // .gen.proto.Scale scale = 3;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 3;
  const ::gen::proto::Scale& scale() const;
  ::gen::proto::Scale* release_scale();
  ::gen::proto::Scale* mutable_scale();
  void set_allocated_scale(::gen::proto::Scale* scale);

  // @@protoc_insertion_point(class_scope:gen.proto.Transform)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::gen::proto::Position* position_;
  ::gen::proto::Rotation* rotation_;
  ::gen::proto::Scale* scale_;
  mutable int _cached_size_;
  friend struct ::protobuf_gameobject_2eproto::TableStruct;
  friend void ::protobuf_gameobject_2eproto::InitDefaultsTransformImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// float x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:gen.proto.Position.x)
  return x_;
}
inline void Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:gen.proto.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:gen.proto.Position.y)
  return y_;
}
inline void Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:gen.proto.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  z_ = 0;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:gen.proto.Position.z)
  return z_;
}
inline void Position::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:gen.proto.Position.z)
}

// -------------------------------------------------------------------

// Rotation

// float x_axis = 1;
inline void Rotation::clear_x_axis() {
  x_axis_ = 0;
}
inline float Rotation::x_axis() const {
  // @@protoc_insertion_point(field_get:gen.proto.Rotation.x_axis)
  return x_axis_;
}
inline void Rotation::set_x_axis(float value) {
  
  x_axis_ = value;
  // @@protoc_insertion_point(field_set:gen.proto.Rotation.x_axis)
}

// float y_axis = 2;
inline void Rotation::clear_y_axis() {
  y_axis_ = 0;
}
inline float Rotation::y_axis() const {
  // @@protoc_insertion_point(field_get:gen.proto.Rotation.y_axis)
  return y_axis_;
}
inline void Rotation::set_y_axis(float value) {
  
  y_axis_ = value;
  // @@protoc_insertion_point(field_set:gen.proto.Rotation.y_axis)
}

// float z_axis = 3;
inline void Rotation::clear_z_axis() {
  z_axis_ = 0;
}
inline float Rotation::z_axis() const {
  // @@protoc_insertion_point(field_get:gen.proto.Rotation.z_axis)
  return z_axis_;
}
inline void Rotation::set_z_axis(float value) {
  
  z_axis_ = value;
  // @@protoc_insertion_point(field_set:gen.proto.Rotation.z_axis)
}

// -------------------------------------------------------------------

// Scale

// float x_scale = 1;
inline void Scale::clear_x_scale() {
  x_scale_ = 0;
}
inline float Scale::x_scale() const {
  // @@protoc_insertion_point(field_get:gen.proto.Scale.x_scale)
  return x_scale_;
}
inline void Scale::set_x_scale(float value) {
  
  x_scale_ = value;
  // @@protoc_insertion_point(field_set:gen.proto.Scale.x_scale)
}

// float y_scale = 2;
inline void Scale::clear_y_scale() {
  y_scale_ = 0;
}
inline float Scale::y_scale() const {
  // @@protoc_insertion_point(field_get:gen.proto.Scale.y_scale)
  return y_scale_;
}
inline void Scale::set_y_scale(float value) {
  
  y_scale_ = value;
  // @@protoc_insertion_point(field_set:gen.proto.Scale.y_scale)
}

// float z_scale = 3;
inline void Scale::clear_z_scale() {
  z_scale_ = 0;
}
inline float Scale::z_scale() const {
  // @@protoc_insertion_point(field_get:gen.proto.Scale.z_scale)
  return z_scale_;
}
inline void Scale::set_z_scale(float value) {
  
  z_scale_ = value;
  // @@protoc_insertion_point(field_set:gen.proto.Scale.z_scale)
}

// -------------------------------------------------------------------

// Transform

// .gen.proto.Position position = 1;
inline bool Transform::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Transform::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::gen::proto::Position& Transform::position() const {
  const ::gen::proto::Position* p = position_;
  // @@protoc_insertion_point(field_get:gen.proto.Transform.position)
  return p != NULL ? *p : *reinterpret_cast<const ::gen::proto::Position*>(
      &::gen::proto::_Position_default_instance_);
}
inline ::gen::proto::Position* Transform::release_position() {
  // @@protoc_insertion_point(field_release:gen.proto.Transform.position)
  
  ::gen::proto::Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::gen::proto::Position* Transform::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::gen::proto::Position;
  }
  // @@protoc_insertion_point(field_mutable:gen.proto.Transform.position)
  return position_;
}
inline void Transform::set_allocated_position(::gen::proto::Position* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:gen.proto.Transform.position)
}

// .gen.proto.Rotation rotation = 2;
inline bool Transform::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void Transform::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
}
inline const ::gen::proto::Rotation& Transform::rotation() const {
  const ::gen::proto::Rotation* p = rotation_;
  // @@protoc_insertion_point(field_get:gen.proto.Transform.rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::gen::proto::Rotation*>(
      &::gen::proto::_Rotation_default_instance_);
}
inline ::gen::proto::Rotation* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:gen.proto.Transform.rotation)
  
  ::gen::proto::Rotation* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::gen::proto::Rotation* Transform::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::gen::proto::Rotation;
  }
  // @@protoc_insertion_point(field_mutable:gen.proto.Transform.rotation)
  return rotation_;
}
inline void Transform::set_allocated_rotation(::gen::proto::Rotation* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:gen.proto.Transform.rotation)
}

// .gen.proto.Scale scale = 3;
inline bool Transform::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
inline void Transform::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
}
inline const ::gen::proto::Scale& Transform::scale() const {
  const ::gen::proto::Scale* p = scale_;
  // @@protoc_insertion_point(field_get:gen.proto.Transform.scale)
  return p != NULL ? *p : *reinterpret_cast<const ::gen::proto::Scale*>(
      &::gen::proto::_Scale_default_instance_);
}
inline ::gen::proto::Scale* Transform::release_scale() {
  // @@protoc_insertion_point(field_release:gen.proto.Transform.scale)
  
  ::gen::proto::Scale* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline ::gen::proto::Scale* Transform::mutable_scale() {
  
  if (scale_ == NULL) {
    scale_ = new ::gen::proto::Scale;
  }
  // @@protoc_insertion_point(field_mutable:gen.proto.Transform.scale)
  return scale_;
}
inline void Transform::set_allocated_scale(::gen::proto::Scale* scale) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scale_;
  }
  if (scale) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:gen.proto.Transform.scale)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace gen

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gameobject_2eproto__INCLUDED
